{"version":3,"sources":["constants/Constants.js","contexts/CalculatorContext.js","components/bottom_section/buttons/AllClearButton.js","components/bottom_section/buttons/CommaButton.js","components/bottom_section/buttons/DivisionButton.js","components/bottom_section/buttons/EqualsButton.js","components/bottom_section/buttons/MinusButton.js","components/bottom_section/buttons/MultiplyButton.js","components/bottom_section/buttons/PercentageButton.js","components/bottom_section/buttons/PlusButton.js","components/bottom_section/buttons/SignButton.js","components/bottom_section/Buttons.js","components/middle_section/Display.js","components/upper_section/Logo.js","components/upper_section/SolarBattery.js","components/Calculator.js","components/MainView.js","App.js","index.js"],"names":["MINUS","ZERO","BLANK","DOT","MAX_CHARACTERS","CalculatorContext","createContext","setOperation","AllClearButton","setDisplayValue","setCurrentValue","useContext","className","onClick","CommaButton","displayValue","calculateLength","indexOf","slice","DivisionButton","setWaitingValue","currentValue","operation","waitingValue","displayResult","String","Number","EqualsButton","MinusButton","MultiplyButton","PercentageButton","PlusButton","SignButton","Buttons","str","length","i","charAt","getButtonValue","value","checkResultLength","result","division","Display","Logo","SolarBattery","Calculator","useState","Provider","MainView","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebb26b0a.chunk.js","sourcesContent":["const PLUS = '+';\r\nconst MINUS = '-';\r\nconst DIVISION = '/';\r\nconst MULTIPLY = '*';\r\nconst PERCENTAGE = '%';\r\nconst ZERO = '0';\r\nconst BLANK = '';\r\nconst DOT = '.';\r\nconst MAX_CHARACTERS = 13;\r\n\r\nexport {\r\n  PLUS,\r\n  MINUS,\r\n  DIVISION,\r\n  MULTIPLY,\r\n  PERCENTAGE,\r\n  ZERO,\r\n  BLANK,\r\n  DOT,\r\n  MAX_CHARACTERS,\r\n};\r\n","import { createContext } from 'react';\r\n\r\nconst CalculatorContext = createContext({\r\n  setOperation: () => {},\r\n});\r\n\r\nexport default CalculatorContext;\r\n","import React, { useContext } from 'react';\r\n\r\nimport { BLANK, ZERO } from '../../../constants/Constants';\r\nimport CalculatorContext from '../../../contexts/CalculatorContext';\r\n\r\nconst AllClearButton = ({ setDisplayValue, setCurrentValue }) => {\r\n  const { setOperation } = useContext(CalculatorContext);\r\n  const clearAll = () => {\r\n    setDisplayValue(ZERO);\r\n    setCurrentValue(ZERO);\r\n    setOperation(BLANK);\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={clearAll}>\r\n      AC\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AllClearButton;\r\n","import React from 'react';\r\n\r\nimport { BLANK, DOT, MAX_CHARACTERS } from '../../../constants/Constants';\r\n\r\nconst CommaButton = ({ setDisplayValue, displayValue, calculateLength }) => {\r\n  const addPrecision = () => {\r\n    if (displayValue.indexOf(DOT) === -1) {\r\n      calculateLength(displayValue) >= MAX_CHARACTERS\r\n        ? setDisplayValue(displayValue.slice(1) + BLANK + DOT)\r\n        : setDisplayValue(displayValue + BLANK + DOT);\r\n    }\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={addPrecision}>\r\n      ,\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CommaButton;\r\n","import React, { useContext } from 'react';\r\n\r\nimport { BLANK, DIVISION } from '../../../constants/Constants';\r\nimport CalculatorContext from '../../../contexts/CalculatorContext';\r\n\r\nconst DivisionButton = ({\r\n  setCurrentValue,\r\n  setWaitingValue,\r\n  displayValue,\r\n  currentValue,\r\n  operation,\r\n  waitingValue,\r\n  displayResult,\r\n}) => {\r\n  const { setOperation } = useContext(CalculatorContext);\r\n  const divide = () => {\r\n    if (!waitingValue) {\r\n      if (operation !== BLANK) {\r\n        displayResult();\r\n        if (operation === DIVISION) {\r\n          setCurrentValue(String(Number(currentValue) / Number(displayValue)));\r\n        }\r\n        setWaitingValue(true);\r\n      } else setCurrentValue(displayValue);\r\n      setWaitingValue(true);\r\n    }\r\n    setOperation(DIVISION);\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={divide}>\r\n      <i className=\"fas fa-divide\"></i>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DivisionButton;\r\n","import React from 'react';\r\n\r\nconst EqualsButton = ({ displayResult }) => {\r\n  return (\r\n    <button className=\"button operation\" onClick={displayResult}>\r\n      <i className=\"fas fa-equals\"></i>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default EqualsButton;\r\n","import React, { useContext } from 'react';\r\n\r\nimport { BLANK, MINUS } from '../../../constants/Constants';\r\nimport CalculatorContext from '../../../contexts/CalculatorContext';\r\n\r\nconst MinusButton = ({\r\n  setCurrentValue,\r\n  setWaitingValue,\r\n  displayValue,\r\n  currentValue,\r\n  operation,\r\n  displayResult,\r\n  waitingValue,\r\n}) => {\r\n  const { setOperation } = useContext(CalculatorContext);\r\n  const subtract = () => {\r\n    if (!waitingValue) {\r\n      if (operation !== BLANK) {\r\n        displayResult();\r\n        if (operation === MINUS) {\r\n          setCurrentValue(String(Number(currentValue) - Number(displayValue)));\r\n        }\r\n        setWaitingValue(true);\r\n      } else setCurrentValue(displayValue);\r\n      setWaitingValue(true);\r\n    }\r\n    setOperation(MINUS);\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={subtract}>\r\n      <i className=\"fas fa-minus\"></i>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default MinusButton;\r\n","import React, { useContext } from 'react';\r\n\r\nimport { BLANK, MULTIPLY } from '../../../constants/Constants';\r\nimport CalculatorContext from '../../../contexts/CalculatorContext';\r\n\r\nconst MultiplyButton = ({\r\n  setCurrentValue,\r\n  displayValue,\r\n  setWaitingValue,\r\n  currentValue,\r\n  operation,\r\n  waitingValue,\r\n  displayResult,\r\n}) => {\r\n  const { setOperation } = useContext(CalculatorContext);\r\n  const multiply = () => {\r\n    if (!waitingValue) {\r\n      if (operation !== BLANK) {\r\n        displayResult();\r\n        if (operation === MULTIPLY) {\r\n          setCurrentValue(String(Number(currentValue) * Number(displayValue)));\r\n        }\r\n        setWaitingValue(true);\r\n      } else setCurrentValue(displayValue);\r\n      setWaitingValue(true);\r\n    }\r\n    setOperation(MULTIPLY);\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={multiply}>\r\n      <i className=\"fas fa-times\"></i>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default MultiplyButton;\r\n","import React from 'react';\r\n\r\nimport { MAX_CHARACTERS, ZERO } from '../../../constants/Constants';\r\n\r\nconst PercentageButton = ({\r\n  displayValue,\r\n  setWaitingValue,\r\n  setDisplayValue,\r\n  currentValue,\r\n  calculateLength,\r\n}) => {\r\n  const percentage = () => {\r\n    if (currentValue === ZERO) {\r\n      setDisplayValue(\r\n        calculateLength(String(Number(displayValue) / 100)) > MAX_CHARACTERS\r\n          ? String(Number(displayValue) / 100).slice(0, MAX_CHARACTERS)\r\n          : String(Number(displayValue) / 100)\r\n      );\r\n    } else\r\n      setDisplayValue(\r\n        calculateLength(\r\n          String(Number(displayValue) * Number(currentValue / 100))\r\n        ) > MAX_CHARACTERS\r\n          ? String(Number(displayValue) * Number(currentValue / 100)).slice(\r\n              0,\r\n              MAX_CHARACTERS\r\n            )\r\n          : String(Number(displayValue) * Number(currentValue / 100))\r\n      );\r\n    setWaitingValue(true);\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={percentage}>\r\n      <i className=\"fas fa-percentage\"></i>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PercentageButton;\r\n","import React, { useContext } from 'react';\r\n\r\nimport { BLANK, PLUS } from '../../../constants/Constants';\r\nimport CalculatorContext from '../../../contexts/CalculatorContext';\r\n\r\nconst PlusButton = ({\r\n  displayValue,\r\n  setWaitingValue,\r\n  setCurrentValue,\r\n  currentValue,\r\n  waitingValue,\r\n  operation,\r\n  displayResult,\r\n}) => {\r\n  const { setOperation } = useContext(CalculatorContext);\r\n  const add = () => {\r\n    if (!waitingValue) {\r\n      if (operation !== BLANK) {\r\n        displayResult();\r\n        if (operation === PLUS) {\r\n          setCurrentValue(String(Number(currentValue) + Number(displayValue)));\r\n        }\r\n        setWaitingValue(true);\r\n      } else setCurrentValue(displayValue);\r\n      setWaitingValue(true);\r\n    }\r\n    setOperation(PLUS);\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={add}>\r\n      <i className=\"fas fa-plus\"></i>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PlusButton;\r\n","import React from 'react';\r\n\r\nimport { MAX_CHARACTERS } from '../../../constants/Constants';\r\n\r\nconst SignButton = ({ displayValue, setDisplayValue, calculateLength }) => {\r\n  const toggleSign = () => {\r\n    calculateLength(displayValue) >= MAX_CHARACTERS\r\n      ? setDisplayValue(String(displayValue.slice(1) * -1))\r\n      : setDisplayValue(String(displayValue * -1));\r\n  };\r\n  return (\r\n    <button className=\"button operation\" onClick={toggleSign}>\r\n      ±\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SignButton;\r\n","import React, { useContext } from 'react';\r\n\r\nimport {\r\n  BLANK,\r\n  DIVISION,\r\n  DOT,\r\n  MAX_CHARACTERS,\r\n  MINUS,\r\n  MULTIPLY,\r\n  PERCENTAGE,\r\n  PLUS,\r\n  ZERO,\r\n} from '../../constants/Constants';\r\nimport CalculatorContext from '../../contexts/CalculatorContext';\r\nimport {\r\n  AllClearButton,\r\n  CommaButton,\r\n  DivisionButton,\r\n  EqualsButton,\r\n  MinusButton,\r\n  MultiplyButton,\r\n  PercentageButton,\r\n  PlusButton,\r\n  SignButton,\r\n} from './buttons/index';\r\n\r\nconst Buttons = ({\r\n  setDisplayValue,\r\n  displayValue,\r\n  waitingValue,\r\n  setWaitingValue,\r\n  setCurrentValue,\r\n  currentValue,\r\n  operation,\r\n}) => {\r\n  const { setOperation } = useContext(CalculatorContext);\r\n  const calculateLength = str => {\r\n    let length = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      length += str.charAt(i) === '1' ? 0.36 : 1;\r\n    }\r\n    return length;\r\n  };\r\n  const getButtonValue = value => {\r\n    if (displayValue === ZERO) setDisplayValue(value);\r\n    else if (calculateLength(displayValue) < MAX_CHARACTERS) {\r\n      setDisplayValue(displayValue + BLANK + value);\r\n    }\r\n    if (waitingValue) {\r\n      setDisplayValue(value);\r\n      setWaitingValue(false);\r\n    }\r\n  };\r\n\r\n  const checkResultLength = (result, division) => {\r\n    if (!division && String(result).indexOf(DOT) === -1) {\r\n      if (calculateLength(String(result)) > MAX_CHARACTERS) {\r\n        if (String(result)[0] !== MINUS)\r\n          return String(result).slice(String(result).length - MAX_CHARACTERS);\r\n        else\r\n          return (\r\n            MINUS +\r\n            String(result).slice(String(result).length - MAX_CHARACTERS - 1)\r\n          );\r\n      } else return String(result);\r\n    } else {\r\n      if (calculateLength(String(result)) > MAX_CHARACTERS) {\r\n        if (String(result)[0] !== MINUS)\r\n          return String(result).slice(0, MAX_CHARACTERS);\r\n        else return String(result).slice(0, MAX_CHARACTERS);\r\n      } else return String(result);\r\n    }\r\n  };\r\n\r\n  const displayResult = () => {\r\n    switch (operation) {\r\n      case PLUS:\r\n        setDisplayValue(\r\n          checkResultLength(Number(currentValue) + Number(displayValue))\r\n        );\r\n        setCurrentValue(String(Number(currentValue) + Number(displayValue)));\r\n        setWaitingValue(true);\r\n        setOperation(BLANK);\r\n        break;\r\n      case MINUS:\r\n        setDisplayValue(\r\n          checkResultLength(Number(currentValue) - Number(displayValue))\r\n        );\r\n        setCurrentValue(String(Number(currentValue) - Number(displayValue)));\r\n        setWaitingValue(true);\r\n        setOperation(BLANK);\r\n        break;\r\n      case MULTIPLY:\r\n        setDisplayValue(\r\n          checkResultLength(Number(currentValue) * Number(displayValue))\r\n        );\r\n        setCurrentValue(String(Number(currentValue) * Number(displayValue)));\r\n        setWaitingValue(true);\r\n        setOperation(BLANK);\r\n        break;\r\n      case DIVISION:\r\n        setDisplayValue(\r\n          checkResultLength(Number(currentValue) / Number(displayValue), true)\r\n        );\r\n        setCurrentValue(String(Number(currentValue) / Number(displayValue)));\r\n        setWaitingValue(true);\r\n        setOperation(BLANK);\r\n        break;\r\n      case PERCENTAGE:\r\n        setDisplayValue(\r\n          checkResultLength(Number(currentValue) * Number(displayValue))\r\n        );\r\n        setWaitingValue(true);\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"buttons\">\r\n      <AllClearButton\r\n        setDisplayValue={setDisplayValue}\r\n        setCurrentValue={setCurrentValue}\r\n      />\r\n      <SignButton\r\n        displayValue={displayValue}\r\n        setDisplayValue={setDisplayValue}\r\n        calculateLength={calculateLength}\r\n      />\r\n      <PercentageButton\r\n        displayValue={displayValue}\r\n        setWaitingValue={setWaitingValue}\r\n        setCurrentValue={setCurrentValue}\r\n        currentValue={currentValue}\r\n        setDisplayValue={setDisplayValue}\r\n        calculateLength={calculateLength}\r\n      />\r\n      <DivisionButton\r\n        displayValue={displayValue}\r\n        setWaitingValue={setWaitingValue}\r\n        setCurrentValue={setCurrentValue}\r\n        currentValue={currentValue}\r\n        operation={operation}\r\n        waitingValue={waitingValue}\r\n        displayResult={displayResult}\r\n      />\r\n\r\n      <button className=\"button\" onClick={() => getButtonValue('7')}>\r\n        7\r\n      </button>\r\n      <button className=\"button\" onClick={() => getButtonValue('8')}>\r\n        8\r\n      </button>\r\n      <button className=\"button\" onClick={() => getButtonValue('9')}>\r\n        9\r\n      </button>\r\n\r\n      <MultiplyButton\r\n        displayValue={displayValue}\r\n        setWaitingValue={setWaitingValue}\r\n        setCurrentValue={setCurrentValue}\r\n        currentValue={currentValue}\r\n        operation={operation}\r\n        waitingValue={waitingValue}\r\n        displayResult={displayResult}\r\n      />\r\n\r\n      <button className=\"button\" onClick={() => getButtonValue('4')}>\r\n        4\r\n      </button>\r\n      <button className=\"button\" onClick={() => getButtonValue('5')}>\r\n        5\r\n      </button>\r\n      <button className=\"button\" onClick={() => getButtonValue('6')}>\r\n        6\r\n      </button>\r\n\r\n      <MinusButton\r\n        displayValue={displayValue}\r\n        setWaitingValue={setWaitingValue}\r\n        setCurrentValue={setCurrentValue}\r\n        currentValue={currentValue}\r\n        operation={operation}\r\n        waitingValue={waitingValue}\r\n        displayResult={displayResult}\r\n      />\r\n\r\n      <button className=\"button\" onClick={() => getButtonValue('1')}>\r\n        1\r\n      </button>\r\n      <button className=\"button\" onClick={() => getButtonValue('2')}>\r\n        2\r\n      </button>\r\n      <button className=\"button\" onClick={() => getButtonValue('3')}>\r\n        3\r\n      </button>\r\n\r\n      <PlusButton\r\n        displayValue={displayValue}\r\n        setWaitingValue={setWaitingValue}\r\n        setCurrentValue={setCurrentValue}\r\n        currentValue={currentValue}\r\n        operation={operation}\r\n        waitingValue={waitingValue}\r\n        displayResult={displayResult}\r\n      />\r\n\r\n      <button className=\"button\" onClick={() => getButtonValue(ZERO)}>\r\n        0\r\n      </button>\r\n      <CommaButton\r\n        setDisplayValue={setDisplayValue}\r\n        displayValue={displayValue}\r\n        calculateLength={calculateLength}\r\n      />\r\n\r\n      <EqualsButton displayResult={displayResult} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\n\r\nconst Display = ({ displayValue }) => {\r\n  return <div className=\"display\">{displayValue}</div>;\r\n};\r\n\r\nexport default Display;\r\n","import React from 'react';\r\n\r\nconst Logo = () => {\r\n  return <div className=\"logo\">JCalculator</div>;\r\n};\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\n\r\nconst SolarBattery = () => {\r\n  return (\r\n    <div className=\"solar-battery\">\r\n      <span className=\"solar-cell\"></span>\r\n      <span className=\"solar-cell\"></span>\r\n      <span className=\"solar-cell\"></span>\r\n      <span className=\"solar-cell\"></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolarBattery;\r\n","import React, { useState } from 'react';\r\n\r\nimport { BLANK, ZERO } from '../constants/Constants';\r\nimport CalculatorContext from '../contexts/CalculatorContext';\r\nimport Buttons from './bottom_section/Buttons';\r\nimport Display from './middle_section/Display';\r\nimport { Logo, SolarBattery } from './upper_section';\r\n\r\nconst Calculator = () => {\r\n  const [displayValue, setDisplayValue] = useState(ZERO);\r\n  const [currentValue, setCurrentValue] = useState(ZERO);\r\n  const [waitingValue, setWaitingValue] = useState(false);\r\n  const [operation, setOperation] = useState(BLANK);\r\n  return (\r\n    <div className=\"calculator-body\">\r\n      <div className=\"upper-section\">\r\n        <SolarBattery />\r\n        <Logo />\r\n      </div>\r\n      <CalculatorContext.Provider value={{ setOperation }}>\r\n        <div className=\"middle-section\">\r\n          <Display\r\n            displayValue={displayValue}\r\n            waitingValue={waitingValue}\r\n            currentValue={currentValue}\r\n          />\r\n        </div>\r\n        <div className=\"bottom-section\">\r\n          <Buttons\r\n            setDisplayValue={setDisplayValue}\r\n            displayValue={displayValue}\r\n            waitingValue={waitingValue}\r\n            setWaitingValue={setWaitingValue}\r\n            setCurrentValue={setCurrentValue}\r\n            currentValue={currentValue}\r\n            operation={operation}\r\n          />\r\n        </div>\r\n      </CalculatorContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import React from 'react';\r\n\r\nimport Calculator from './Calculator';\r\n\r\nconst MainView = () => {\r\n  return (\r\n    <div className=\"main-view\">\r\n      <Calculator />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainView;\r\n","import './App.css';\nimport React from 'react';\n\nimport MainView from './components/MainView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainView />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}